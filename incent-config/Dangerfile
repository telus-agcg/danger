danger.import_dangerfile(
  github: 'technekes/danger',
  path: 'Dangerfile'
)

def rakefile_added?
  git.added_files.include?('Rakefile')
end

def ignore_list
  %w(
    .
    ..
    .circleci
    .git
    .gitignore
    bin
    docs
    exceptions
    README.md
    shared
    cue.mod
  )
end

def directories
  @directories ||= Dir.entries('.')
    .select { |e| File.directory?(e) }
    .reject { |e| ignore_list.include?(e) }
end

def modified_program_sets
  @modified_program_sets ||= git.modified_files
    .concat(git.added_files)
    .concat(git.deleted_files)
    .map { |file| file.split('/')[0] }
    .reject { |file| ignore_list.include?(file) }
    .uniq
end

def multiple_program_sets?
  modified_program_sets.count > 1
end

def program_set_from_pr_title
  return 'na' if not_applicable_pr_title?

  @program_set_from_pr_title ||=
    directories.find { |dir| github.pr_title.include?("[#{dir}]") || github.pr_title.include?("(#{dir})") }.to_s
end

def program_set_from_branch
  return 'na' if not_applicable_branch_name?

  branch_name.split('/')[1]
end

def program_set_from_commit
  return 'na' if not_applicable_subject? || not_applicable_body?

  @program_set_from_commit ||= directories.find do |dir|
    commit_subject.include?("[#{dir}]") ||
      commit_body.include?("[#{dir}]") ||
      commit_subject.include?("(#{dir})") ||
      commit_body.include?("(#{dir})")
  end
end

def program_set_candidates
  @program_set_candidates ||= [
    program_set_from_pr_title,
    program_set_from_branch,
    program_set_from_commit,
    modified_program_sets.first
  ].compact.uniq
end

def program_set_mismatch?
  return false if program_set_from_branch == 'na'

  program_set_candidates.length != 1
end

def program_set
  program_set_candidates.first
end

def commit_subject
  @commit_subject ||= `git log --pretty=format:%s --reverse -1`
end

def commit_body
  @commit_body ||= `git log --pretty=format:%b --reverse -1`
end

def not_applicable?(text)
  ["[na]", "(na)"].any? { |na| text.include?(na) }
end

def not_applicable_pr_title?
  @not_applicable_pr_title ||= not_applicable?(github.pr_title)
end

def not_applicable_branch_name?
  @not_applicable_branch_name ||= branch_name.include?('/na/')
end

def not_applicable_subject?
  @not_applicable_subject ||= not_applicable?(commit_subject)
end

def not_applicable_body?
  @not_applicable_body ||= not_applicable?(commit_body)
end

def valid_commit_message?
  if merge_branch?
    return true if not_applicable_subject? || not_applicable_body?

    commit_subject.include?(program_set) || commit_body.include?(program_set)
  else
    return true if not_applicable_subject?

    commit_subject.include?(program_set)
  end
end

def merge_branch?
  @merge_branch ||= commit_subject.start_with?('Merge')
end

def branch_contains_program_set?
  return true if not_applicable_branch_name?

  directories.select { |directory| branch_name.include?(directory) }.any?
end

def rendered_programs_changed?
  `git status #{program_set}/programs --short | wc -l`.strip != '0'
end

# ------------------------------------------------------------------------------
# Is PR body missing a ZOHO ticket number?
# ------------------------------------------------------------------------------
def pr_missing_zoho_ticket_number?
  (github.pr_body =~ /ZOHO-\d{18}/).nil?
end

message("targeted-program-set detected: #{program_set}")
# message("targeted-program-set using ./targeted_program_set: #{`./targeted_program_set`}")

if base_branch_master? && !release_branch?
  fail('Please use `release` branch for PR into master')
end

if rendered_programs_changed?
  rendered_programs_changed_message = <<~MESSAGE
    Changes occurred while rendering.
    Please generate files from templates before pushing by running:
    `incent-validate-program-set`.
  MESSAGE

  fail(strip_doc(rendered_programs_changed_message))
end

if program_set_mismatch?
  program_set_mismatch_message = <<~MESSAGE
    Inconsistent program-set.
    Are the branch, commits and PR all named correctly and 
    consistent with the modified program set?
  MESSAGE
  
  fail(strip_doc(program_set_mismatch_message))
end

unless branch_contains_program_set? && branch_contains_prefix? && branch_name_contains_no_underscore?
  invalid_branch_name_message = <<~MESSAGE
    'feature' (or 'release') and/or 'program-set-key' are not in the branch name or
    branch name includes underscores insteas of hyphens.
    Unfortunately, you'll need to rename your branch then create a new pull
    request.  Here's an example: `feature/2020-foo-bar/update-uoms`
  MESSAGE

  fail(strip_doc(invalid_branch_name_message))
end

unless github.pr_title.include?(program_set)
  invalid_pr_title_message = <<~MESSAGE
    Please include the program-set in your Pull Request title.
    Here's an example: `[incent-config-foo-bar] Add UOMs`. Or if this does not
    relate to a specific program-set: `[na] Update .gitignore`.
  MESSAGE

  fail(strip_doc(invalid_pr_title_message))
end

unless valid_commit_message?
  validation = merge_branch? ? 'title or body' : 'title'

  invalid_commit_message = <<~MESSAGE
    Please include the program-set in your commit #{validation}.
    Here's an example: `[incent-config-foo-bar] Add UOMs`. Or if this does not
    relate to a specific program-set: `[na] Update .gitignore`.
  MESSAGE

  fail(strip_doc(invalid_commit_message))
end

fail('Please only modify one program-set at a time') if multiple_program_sets?

fail('Please do not add Rakefiles to config repos') if rakefile_added?

fail('Please add a description for your PR') if github.pr_body.empty?

# ------------------------------------------------------------------------------
# Fail when PR body does not have ZOHO ticket number
# ------------------------------------------------------------------------------
fail('PR has no ZOHO ticket number') if pr_missing_zoho_ticket_number?
